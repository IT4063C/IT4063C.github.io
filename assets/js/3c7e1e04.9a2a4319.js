"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5608],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,k=p["".concat(o,".").concat(c)]||p[c]||m[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},84345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:2.2,title:"SQL Refresher",sidebar_label:"SQL2"},i=void 0,s={unversionedId:"refreshers/sql/another",id:"refreshers/sql/another",title:"SQL Refresher",description:"Data types",source:"@site/content/course-notes/3.refreshers/sql/another.md",sourceDirName:"3.refreshers/sql",slug:"/refreshers/sql/another",permalink:"/course-notes/refreshers/sql/another",draft:!1,editUrl:"https://github.com/IT4063C/IT4063C.github.io/tree/main/content/course-notes/3.refreshers/sql/another.md",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1660006784,formattedLastUpdatedAt:"Aug 9, 2022",sidebarPosition:2.2,frontMatter:{sidebar_position:2.2,title:"SQL Refresher",sidebar_label:"SQL2"},sidebar:"notes",previous:{title:"SQL",permalink:"/course-notes/refreshers/sql/"}},o={},d=[{value:"Data types",id:"data-types",level:2},{value:"Text types",id:"text-types",level:3},{value:"Number types",id:"number-types",level:3},{value:"Date types",id:"date-types",level:3},{value:"Insert",id:"insert",level:2},{value:"Update",id:"update",level:2},{value:"Delete",id:"delete",level:2},{value:"All",id:"all",level:3},{value:"Condition",id:"condition",level:3},{value:"Select",id:"select",level:2},{value:"Basic",id:"basic",level:3},{value:"Condition",id:"condition-1",level:3},{value:"Order",id:"order",level:3},{value:"Distinct",id:"distinct",level:3},{value:"And Condition",id:"and-condition",level:3},{value:"Between",id:"between",level:3},{value:"Like",id:"like",level:3},{value:"Count",id:"count",level:3},{value:"Having and without join",id:"having-and-without-join",level:3},{value:"Join the hard way",id:"join-the-hard-way",level:2},{value:"Inner Join",id:"inner-join",level:3},{value:"Multi Join",id:"multi-join",level:3},{value:"Join the right way",id:"join-the-right-way",level:2},{value:"Inner Equi Key Joining",id:"inner-equi-key-joining",level:3},{value:"Multi Inner Equi Key Joining",id:"multi-inner-equi-key-joining",level:3},{value:"About Joins",id:"about-joins",level:2},{value:"Select with Subqueries",id:"select-with-subqueries",level:2},{value:"Union",id:"union",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Variables",id:"variables",level:2},{value:"Function",id:"function",level:2},{value:"Stored Procedure",id:"stored-procedure",level:2}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"data-types"},"Data types"),(0,r.kt)("h3",{id:"text-types"},"Text types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CHAR(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"Holds a fixed length string (can contain letters, numbers, and special characters). The fixed size is specified in parenthesis. Can store up to 255 characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"Holds a variable length string (can contain letters, numbers, and special characters). The maximum size is specified in parenthesis. Can store up to 255 characters. Note: If you put a greater value than 255 it will be converted to a TEXT type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TINYTEXT"),(0,r.kt)("td",{parentName:"tr",align:null},"Holds a string with a maximum length of 255 characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TEXT"),(0,r.kt)("td",{parentName:"tr",align:null},"Holds a string with a maximum length of 65,535 characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BLOB"),(0,r.kt)("td",{parentName:"tr",align:null},"For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MEDIUMTEXT"),(0,r.kt)("td",{parentName:"tr",align:null},"Holds a string with a maximum length of 16,777,215 characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MEDIUMBLOB"),(0,r.kt)("td",{parentName:"tr",align:null},"For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LONGTEXT"),(0,r.kt)("td",{parentName:"tr",align:null},"Holds a string with a maximum length of 4,294,967,295 characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LONGBLOB"),(0,r.kt)("td",{parentName:"tr",align:null},"For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ENUM(x,y,z,etc.)"),(0,r.kt)("td",{parentName:"tr",align:null},"Let you enter a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted.Note: The values are sorted in the order you enter them.You enter the possible values in this format: ENUM('X','Y','Z')")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SET"),(0,r.kt)("td",{parentName:"tr",align:null},"Similar to ENUM except that SET may contain up to 64 list items and can store more than one choice")))),(0,r.kt)("h3",{id:"number-types"},"Number types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TINYINT(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"-128 to 127 normal. 0 to 255 UNSIGNED*. The maximum number of digits may be specified in parenthesis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SMALLINT(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"-32768 to 32767 normal. 0 to 65535 UNSIGNED*. The maximum number of digits may be specified in parenthesis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MEDIUMINT(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"-8388608 to 8388607 normal. 0 to 16777215 UNSIGNED*. The maximum number of digits may be specified in parenthesis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INT(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"-2147483648 to 2147483647 normal. 0 to 4294967295 UNSIGNED*. The maximum number of digits may be specified in parenthesis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT(size)"),(0,r.kt)("td",{parentName:"tr",align:null},"-9223372036854775808 to 9223372036854775807 normal. 0 to 18446744073709551615 UNSIGNED*. The maximum number of digits may be specified in parenthesis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT(size,d)"),(0,r.kt)("td",{parentName:"tr",align:null},"A small number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DOUBLE(size,d)"),(0,r.kt)("td",{parentName:"tr",align:null},"A large number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DECIMAL(size,d)"),(0,r.kt)("td",{parentName:"tr",align:null},"A DOUBLE stored as a string , allowing for a fixed decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter")))),(0,r.kt)("h3",{id:"date-types"},"Date types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATE()"),(0,r.kt)("td",{parentName:"tr",align:null},"A date. Format: YYYY-MM-DDNote: The supported range is from '1000-01-01' to '9999-12-31'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATETIME()"),(0,r.kt)("td",{parentName:"tr",align:null},"*A date and time combination. Format: YYYY-MM-DD HH:MI:SSNote: The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP()"),(0,r.kt)("td",{parentName:"tr",align:null},"*A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD HH:MI:SSNote: The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME()"),(0,r.kt)("td",{parentName:"tr",align:null},"A time. Format: HH:MI:SSNote: The supported range is from '-838:59:59' to '838:59:59'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"YEAR()"),(0,r.kt)("td",{parentName:"tr",align:null},"A year in two-digit or four-digit format.Note: Values allowed in four-digit format: 1901 to 2155. Values allowed in two-digit format: 70 to 69, representing years from 1970 to 2069")))),(0,r.kt)("h2",{id:"insert"},"Insert"),(0,r.kt)("p",null,"Selected fields"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"insert into tkey_moral (id_moral_nr, moral_bez) \nvalues \n    (1, 'gut'), \n    (2, 'schlecht'), \n    (3, 'schlecht');\n")),(0,r.kt)("h2",{id:"update"},"Update"),(0,r.kt)("p",null,"Update by condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"update tbl_kunde set name = 'Menzer' where name = 'Waltensp\xfchl-Menzer'\nupdate tass_police set praem_stufe = 101 where praem_stufe = 108\n")),(0,r.kt)("h2",{id:"delete"},"Delete"),(0,r.kt)("h3",{id:"all"},"All"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"delete from tbl_kunde\n")),(0,r.kt)("h3",{id:"condition"},"Condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"delete from tkey_moral where id_moral_nr = 4\ndelete from tbl_kunde where vorname = 'Peter' and name = 'Fischer' or vorname = 'Martin' and name = 'M\xfcller'\n")),(0,r.kt)("h2",{id:"select"},"Select"),(0,r.kt)("h3",{id:"basic"},"Basic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_jahr from dbo.tbl_stueck\n")),(0,r.kt)("h3",{id:"condition-1"},"Condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_jahr from dbo.tbl_stueck where dt_jahr is not null\n")),(0,r.kt)("h3",{id:"order"},"Order"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_jahr from dbo.tbl_stueck\nwhere dt_jahr is not null\norder by dt_jahr desc\n")),(0,r.kt)("h3",{id:"distinct"},"Distinct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select distinct dt_jahr from dbo.tbl_stueck\nwhere dt_jahr is not null\norder by dt_jahr asc\n")),(0,r.kt)("h3",{id:"and-condition"},"And Condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from tbl_stueck where dt_jahr = 1970 and dt_zeit > 3\n")),(0,r.kt)("h3",{id:"between"},"Between"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from tbl_stueck where dt_jahr = 1970 and dt_zeit between 3 and 10\n")),(0,r.kt)("h3",{id:"like"},"Like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from tbl_stueck where dt_stueck_titel like 'Let%'\n")),(0,r.kt)("h3",{id:"count"},"Count"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select count(dt_stueck_titel) from tbl_stueck where dt_stueck_titel like 'Let%'\n")),(0,r.kt)("h3",{id:"having-and-without-join"},"Having and without join"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select i.dt_name, count(s.dt_stueck_titel) from tbl_stueck as s, tkey_interpret as i\nwhere  s.fi_interpret = i.id_interpret\ngroup by i.dt_name\nhaving count(s.dt_stueck_titel) >10\norder by count(s.dt_stueck_titel) de\n")),(0,r.kt)("h2",{id:"join-the-hard-way"},"Join the hard way"),(0,r.kt)("h3",{id:"inner-join"},"Inner Join"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select s.dt_stueck_titel, i.dt_name\nfrom tbl_stueck as s, tkey_interpret as i\nwhere  s.fi_interpret = i.id_interpret\norder by s.dt_stueck_titel\n")),(0,r.kt)("h3",{id:"multi-join"},"Multi Join"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select sa.id_jahr, st.dt_stueck_titel, ip.dt_name\nfrom tbl_stueck as st, tass_stueck_sampler as ss, tkey_sampler as sa, tkey_interpret as ip\nwhere ss.id_fi_stueck_nr = st.id_stueck_nr \nand ss.id_fi_jahr = sa.id_jahr\nand  st.fi_interpret = ip.id_interpret\norder by  st.dt_stueck_titel\n")),(0,r.kt)("h2",{id:"join-the-right-way"},"Join the right way"),(0,r.kt)("h3",{id:"inner-equi-key-joining"},"Inner Equi Key Joining"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_stueck_titel, dt_name\nfrom tbl_stueck join tkey_interpret \non fi_interpret = id_interpret\norder by dt_stueck_titel\n")),(0,r.kt)("h3",{id:"multi-inner-equi-key-joining"},"Multi Inner Equi Key Joining"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select id_fi_jahr, dt_stueck_titel, dt_name\nfrom tbl_stueck\njoin tass_stueck_sampler on id_fi_stueck_nr = id_stueck_nr\njoin tkey_interpret on fi_interpret = id_interpret\norder by  dt_stueck_titel\n")),(0,r.kt)("h2",{id:"about-joins"},"About Joins"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"http://i.stack.imgur.com/hzl8e.png",alt:"sql join summary"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT customers.id, customers.name, items.name, customers.state \nFROM customers, items\nWHERE customers.id=seller_id\nORDER BY customers.id\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Join tables")," -> Joining two tables together in a query output. The third line is important because it shows how the two tables are related (in this case it is their key values).   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT customers.name, items.name FROM customers\nLEFT OUTER JOIN items ON customers.id=seller_id\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"LEFT/RIGHT OUTER JOIN")," -> Takes the table left of the word 'LEFT' or 'RIGHT' (in this case customers) and joins it regardless of whether it has any values or not. So the above statement shows all users/customers, even if they aren't selling anything.  "),(0,r.kt)("h2",{id:"select-with-subqueries"},"Select with Subqueries"),(0,r.kt)("p",null,"Select max and min values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_stueck_titel as Titel, dt_zeit as Zeit\nfrom tbl_stueck\nwhere dt_zeit = (select max(dt_zeit) from tbl_stueck)\nor dt_zeit = (select min(dt_zeit) from tbl_stueck)\norder by dt_zeit;\n")),(0,r.kt)("p",null,"Select with query in condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_stueck_titel as Titel, dt_zeit as Zeit\nfrom tbl_stueck\nwhere dt_zeit between (select avg(dt_zeit) from tbl_stueck)*0.9\nand (select avg(dt_zeit) from tbl_stueck)*1.1\norder by dt_zeit;\n")),(0,r.kt)("p",null,"Select query as value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select dt_stueck_titel as Titel,\ndt_zeit/(select avg(dt_zeit) from tbl_stueck)*100 as Zeit\nfrom tbl_stueck\nwhere dt_stueck_titel = 'You Shook Me'\n")),(0,r.kt)("h2",{id:"union"},"Union"),(0,r.kt)("p",null,"Unify two result sets with a condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select *  from\n(select dt_stueck_titel as titel, 'st\xfcck' as 'type' from tbl_stueck\nunion\nselect dt_name as titel,  'inter' as 'type' from tkey_interpret\nunion\nselect dt_stao as titel,  'stao' as 'type' from tkey_standort) as t\nwhere t.titel like '%boy%'\n")),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"Run a transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"begin transaction\nupdate tass_police set bezahlt = 0 where id_fi_kunde = 3533 and id_fi_vers_art = 1700\ncommit\n-- or rollback\n")),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Declare"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE @veraenderung SMALLINT = 180;\nDECLARE @neue_summe INT;\n")),(0,r.kt)("h2",{id:"function"},"Function"),(0,r.kt)("p",null,"A function can be called from inside a statement just like any other function and can return a scalar value."),(0,r.kt)("p",null,"Create - Get value from table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create function f_plic_bez()\n  returns decimal(10,2)\n  as begin\n  return (select sum(bezahlt) from tass_police)\n  end;\ngo\nselect  dbo.f_plic_bez() AS 'Summe aller bezahlten Leistungen'\ngo\n")),(0,r.kt)("p",null,"Drop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"drop function f_bezahlt_versich\n")),(0,r.kt)("p",null,"Create - With parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create function f_rabatt(@name varchar(40), @vers varchar(30))\n  returns int\n  as begin\n  return (select (praem_stufe-100)*10 from  tass_police\n  join tbl_kunde on id_fi_kunde = id_kunde\n  join tkey_versicherung on id_fi_vers_art = id_vers_art\n  where name = @name and vers_bez = @vers)\n  end\n")),(0,r.kt)("h2",{id:"stored-procedure"},"Stored Procedure"),(0,r.kt)("p",null,"Stored procedures are stored as precompilated code (stored routine) and called by the programmer wherever it wants to fire. Stored procedure can return value(s)."),(0,r.kt)("p",null,"Create and execute"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE PROCEDURE p_polic_del @fname VARCHAR(30), @versich VARCHAR(30)\n  AS\n  BEGIN\n    DELETE FROM tass_police\n      FROM tbl_kunde, tkey_versicherung\n        WHERE name = @fname\n          AND id_kunde = id_fi_kunde\n          AND id_fi_vers_art = id_vers_art\n          AND vers_bez = @versich\n    IF @@ROWCOUNT = 0\n      PRINT 'Police existiert nicht.'\n      ELSE PRINT 'L\xf6schung vollzogen.'\n  END\nGO\n\nEXECUTE p_polic_del 'Meier', 'Taggeld';\n")))}m.isMDXComponent=!0}}]);