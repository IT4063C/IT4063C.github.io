"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4337],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,E=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(E,i(i({ref:t},c),{},{components:n})):a.createElement(E,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:2.1,title:"SQL Refresher",sidebar_label:"SQL"},i=void 0,s={unversionedId:"refreshers/sql/index",id:"refreshers/sql/index",title:"SQL Refresher",description:"SQL, or Structured Query Language, is a language to talk to databases. It allows you to select specific data and to build complex reports. Today, SQL is a universal language of data. It is used in practically all technologies that process data.",source:"@site/content/course-notes/3.refreshers/sql/index.md",sourceDirName:"3.refreshers/sql",slug:"/refreshers/sql/",permalink:"/course-notes/refreshers/sql/",draft:!1,editUrl:"https://github.com/IT4063C/IT4063C.github.io/tree/main/content/course-notes/3.refreshers/sql/index.md",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1659930061,formattedLastUpdatedAt:"Aug 8, 2022",sidebarPosition:2.1,frontMatter:{sidebar_position:2.1,title:"SQL Refresher",sidebar_label:"SQL"},sidebar:"notes",previous:{title:"Python",permalink:"/course-notes/refreshers/python/"},next:{title:"SQL2",permalink:"/course-notes/refreshers/sql/another"}},o={},u=[{value:"SAMPLE DATA",id:"sample-data",level:2},{value:"QUERYING SINGLE TABLE",id:"querying-single-table",level:2},{value:"ALIASES",id:"aliases",level:2},{value:"COLUMNS",id:"columns",level:3},{value:"TABLES",id:"tables",level:3},{value:"FILTERING THE OUTPUT",id:"filtering-the-output",level:2},{value:"COMPARISON OPERATORS",id:"comparison-operators",level:3},{value:"TEXT OPERATORS",id:"text-operators",level:3},{value:"OTHER OPERATORS",id:"other-operators",level:3},{value:"QUERYING MULTIPLE TABLES",id:"querying-multiple-tables",level:2},{value:"INNER JOIN",id:"inner-join",level:3},{value:"LEFT JOIN",id:"left-join",level:3},{value:"RIGHT JOIN",id:"right-join",level:3},{value:"FULL JOIN",id:"full-join",level:3},{value:"CROSS JOIN",id:"cross-join",level:3},{value:"AGGREGATION AND GROUPING",id:"aggregation-and-grouping",level:2},{value:"AGGREGATE FUNCTIONS",id:"aggregate-functions",level:3},{value:"EXAMPLE QUERIES",id:"example-queries",level:3},{value:"SUBQUERIES",id:"subqueries",level:2},{value:"SINGLE VALUE",id:"single-value",level:3},{value:"MULTIPLE VALUES",id:"multiple-values",level:3},{value:"CORRELATED",id:"correlated",level:3},{value:"SET OPERATIONS",id:"set-operations",level:2},{value:"UNION",id:"union",level:3},{value:"INTERSECT",id:"intersect",level:3},{value:"EXCEPT",id:"except",level:3}],c={toc:u};function p(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SQL"),", or Structured Query Language, is a language to talk to databases. It allows you to select specific data and to build complex reports. Today, SQL is a universal language of data. It is used in practically all technologies that process data."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This cheatsheet is from ",(0,r.kt)("a",{parentName:"p",href:"https://learnsql.com/blog/sql-basics-cheat-sheet/"},"https://learnsql.com/blog/sql-basics-cheat-sheet/"))),(0,r.kt)("h2",{id:"sample-data"},"SAMPLE DATA"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sample data",src:n(26290).Z,width:"2000",height:"936"})),(0,r.kt)("h2",{id:"querying-single-table"},"QUERYING SINGLE TABLE"),(0,r.kt)("p",null,"Fetch all columns from the country table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM country;\n")),(0,r.kt)("p",null,"Fetch id and name columns from the city table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name\nFROM city;\n")),(0,r.kt)("p",null,"Fetch city names sorted by the rating column in the default ASCending order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nORDER BY rating [ASC];\n")),(0,r.kt)("p",null,"Fetch city names sorted by the rating column in the DESCending order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nORDER BY rating DESC;\n")),(0,r.kt)("h2",{id:"aliases"},"ALIASES"),(0,r.kt)("h3",{id:"columns"},"COLUMNS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name AS city_name\nFROM city;\n")),(0,r.kt)("h3",{id:"tables"},"TABLES"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT co.name, ci.name\nFROM city AS ci\nJOIN country AS co\n  ON ci.country_id = co.id;\n")),(0,r.kt)("h2",{id:"filtering-the-output"},"FILTERING THE OUTPUT"),(0,r.kt)("h3",{id:"comparison-operators"},"COMPARISON OPERATORS"),(0,r.kt)("p",null,"Fetch names of cities that have a rating above 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE rating > 3;\n")),(0,r.kt)("p",null,"Fetch names of cities that are neither Berlin nor Madrid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE name != 'Berlin'\n  AND name != 'Madrid';\n")),(0,r.kt)("h3",{id:"text-operators"},"TEXT OPERATORS"),(0,r.kt)("p",null,"Fetch names of cities that start with a 'P' or end with an 's':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE name LIKE 'P%'\n  OR name LIKE '%s';\n")),(0,r.kt)("p",null,"Fetch names of cities that start with any letter followed by 'ublin' (like Dublin in Ireland or Lublin in Poland):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE name LIKE '%ublin';\n")),(0,r.kt)("h3",{id:"other-operators"},"OTHER OPERATORS"),(0,r.kt)("p",null,"Fetch names of cities that have a population between 500K and 5M:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE population BETWEEN 500000 AND 5000000;\n")),(0,r.kt)("p",null,"Fetch names of cities that don't miss a rating value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE rating IS NOT NULL;\n")),(0,r.kt)("p",null,"Fetch names of cities that are in countries with IDs 1, 4, 7, or 8:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE country_id IN (1, 4, 7, 8);\n")),(0,r.kt)("h2",{id:"querying-multiple-tables"},"QUERYING MULTIPLE TABLES"),(0,r.kt)("h3",{id:"inner-join"},"INNER JOIN"),(0,r.kt)("p",null,"JOIN (or explicitly INNER JOIN) returns rows that have matching values in both tables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\n[INNER] JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using INNER JOIN",src:n(16253).Z,width:"1536",height:"342"})),(0,r.kt)("h3",{id:"left-join"},"LEFT JOIN"),(0,r.kt)("p",null,"LEFT JOIN returns all rows from the left table with corresponding rows from the right table. If there's no matching row, NULLs are returned as values from the second table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nLEFT JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using LEFT JOIN",src:n(81009).Z,width:"1532",height:"358"})),(0,r.kt)("h3",{id:"right-join"},"RIGHT JOIN"),(0,r.kt)("p",null,"RIGHT JOIN returns all rows from the right table with corresponding rows from the left table. If there's no matching row, NULLs are returned as values from the left table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nRIGHT JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using RIGHT JOIN",src:n(99543).Z,width:"2000",height:"440"})),(0,r.kt)("h3",{id:"full-join"},"FULL JOIN"),(0,r.kt)("p",null,"FULL JOIN (or explicitly FULL OUTER JOIN) returns all rows from both tables \u2013 if there's no matching row in the second table, NULLs are returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nFULL [OUTER] JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using FULL JOIN",src:n(2913).Z,width:"2000",height:"513"})),(0,r.kt)("h3",{id:"cross-join"},"CROSS JOIN"),(0,r.kt)("p",null,"CROSS JOIN returns all possible combinations of rows from both tables. There are two syntaxes available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nCROSS JOIN country;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city, country;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using CROSS JOIN",src:n(68066).Z,width:"2000",height:"513"})),(0,r.kt)("h2",{id:"aggregation-and-grouping"},"AGGREGATION AND GROUPING"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," groups together rows that have the same values in specified columns. It computes summaries (aggregates) for each unique combination of values."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Table before and after aggregation",src:n(66289).Z,width:"2000",height:"666"})),(0,r.kt)("h3",{id:"aggregate-functions"},"AGGREGATE FUNCTIONS"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"avg(expr)")," \u2212 average value for rows within the group\n",(0,r.kt)("inlineCode",{parentName:"p"},"count(expr)")," \u2212 count of values for rows within the group\n",(0,r.kt)("inlineCode",{parentName:"p"},"max(expr)")," \u2212 maximum value within the group\n",(0,r.kt)("inlineCode",{parentName:"p"},"min(expr)")," \u2212 minimum value within the group\n",(0,r.kt)("inlineCode",{parentName:"p"},"sum(expr)")," \u2212 sum of values within the group"),(0,r.kt)("h3",{id:"example-queries"},"EXAMPLE QUERIES"),(0,r.kt)("p",null,"Find out the number of cities:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*)\nFROM city;\n")),(0,r.kt)("p",null,"Find out the number of cities with non-null ratings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(rating)\nFROM city;\n")),(0,r.kt)("p",null,"Find out the number of distinctive country values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(DISTINCT country_id)\nFROM city;\n")),(0,r.kt)("p",null,"Find out the smallest and the greatest country populations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MIN(population), MAX(population)\nFROM country;\n")),(0,r.kt)("p",null,"Find out the total population of cities in respective countries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT country_id, SUM(population)\nFROM city\nGROUP BY country_id;\n")),(0,r.kt)("p",null,"Find out the average rating for cities in respective countries if the average is above 3.0:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT country_id, AVG(rating)\nFROM city\nGROUP BY country_id\nHAVING AVG(rating) > 3.0;\n")),(0,r.kt)("h2",{id:"subqueries"},"SUBQUERIES"),(0,r.kt)("p",null,"A subquery is a query that is nested inside another query, or inside another subquery. There are different types of subqueries."),(0,r.kt)("h3",{id:"single-value"},"SINGLE VALUE"),(0,r.kt)("p",null,"The simplest subquery returns exactly one column and exactly one row. It can be used with comparison operators =, <, <=, >, or >=."),(0,r.kt)("p",null,"This query finds cities with the same rating as Paris:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE rating = (\n  SELECT rating\n  FROM city\n  WHERE name = 'Paris'\n);\n")),(0,r.kt)("h3",{id:"multiple-values"},"MULTIPLE VALUES"),(0,r.kt)("p",null,"A subquery can also return multiple columns or multiple rows. Such subqueries can be used with operators IN, EXISTS, ALL, or ANY."),(0,r.kt)("p",null,"This query finds cities in countries that have a population above 20M:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE country_id IN (\n  SELECT country_id\n  FROM country\n  WHERE population > 20000000\n);\n")),(0,r.kt)("h3",{id:"correlated"},"CORRELATED"),(0,r.kt)("p",null,"A correlated subquery refers to the tables introduced in the outer query. A correlated subquery depends on the outer query. It cannot be run independently from the outer query."),(0,r.kt)("p",null,"This query finds cities with a population greater than the average population in the country:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM city main_city\nWHERE population > (\n  SELECT AVG(population)\n  FROM city average_city\n  WHERE average_city.country_id = main_city.country_id\n);\n")),(0,r.kt)("p",null,"This query finds countries that have at least one city:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM country\nWHERE EXISTS (\n  SELECT *\n  FROM city\n  WHERE country_id = country.id\n);\n")),(0,r.kt)("h2",{id:"set-operations"},"SET OPERATIONS"),(0,r.kt)("p",null,"Set operations are used to combine the results of two or more queries into a single result. The combined queries must return the same number of columns and compatible data types. The names of the corresponding columns can be different"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sample data for set operations",src:n(41116).Z,width:"2000",height:"502"})),(0,r.kt)("h3",{id:"union"},"UNION"),(0,r.kt)("p",null,"UNION combines the results of two result sets and removes duplicates. UNION ALL doesn't remove duplicate rows."),(0,r.kt)("p",null,"This query displays German cyclists together with German skaters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT name\nFROM cycling\nWHERE country = 'DE'\nUNION / UNION ALL\nSELECT name\nFROM skating\nWHERE country = 'DE';\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"UNION circles",src:n(96777).Z,width:"500",height:"889"})),(0,r.kt)("h3",{id:"intersect"},"INTERSECT"),(0,r.kt)("p",null,"INTERSECT returns only rows that appear in both result sets."),(0,r.kt)("p",null,"This query displays German cyclists who are also German skaters at the same time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM cycling\nWHERE country = 'DE'\nINTERSECT\nSELECT name\nFROM skating\nWHERE country = 'DE';\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"INTERSECT circles",src:n(33606).Z,width:"500",height:"888"})),(0,r.kt)("h3",{id:"except"},"EXCEPT"),(0,r.kt)("p",null,"EXCEPT returns only the rows that appear in the first result set but do not appear in the second result set."),(0,r.kt)("p",null,"This query displays German cyclists unless they are also German skaters at the same time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM cycling\nWHERE country = 'DE'\nEXCEPT / MINUS\nSELECT name\nFROM skating\nWHERE country = 'DE';\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Except circles",src:n(68960).Z,width:"500",height:"888"})))}p.isMDXComponent=!0},26290:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-sample-data-c2979b57912972a4dfe843cf0a060b01.png"},16253:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/02-inner-join-5b94bdc099b2876747a29e50a341c4f8.png"},81009:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/03-left-join-7b510d100b7bea0df5edc38fb5d143e3.png"},99543:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/04-right-join-b9442e22a02618bf3469af9bbd7a3fd0.png"},2913:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/05-full-join-23fe10d649561370de35a31fbc4fa122.png"},68066:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/06-cross-join-10e6d5af32cf51bd16c605d9dea9e2e4.png"},66289:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/08-aggregation-577431b401c48d5c380d754f3d418f4c.png"},41116:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/09-sets-data-9a33ec95d0b3d265c2f54f2bc0502869.png"},96777:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/10-union-e4dffd53025ecaf3622016de97e69e3f.png"},33606:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/11-intersect-7f4e15be5da20ef0dfc22a9b38b48641.png"},68960:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/12-except-0b03d224d6913df19cac245811c8ea0a.png"}}]);