"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9234],{32040:e=>{e.exports=JSON.parse('{"pluginId":"course-notes","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"notes":[{"type":"link","label":"Notes","href":"/course-notes/","docId":"index"},{"type":"link","label":"Data Analytics","href":"/course-notes/data-analytics/","docId":"data-analytics/index"},{"type":"category","label":"Development Environment","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Git and GitHub","href":"/course-notes/dev-env/git/","docId":"dev-env/git/index"},{"type":"category","label":"Version & Package Management","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Pip","href":"/course-notes/dev-env/package-and-version-management/pip","docId":"dev-env/package-and-version-management/pip"},{"type":"link","label":"Pyenv","href":"/course-notes/dev-env/package-and-version-management/pyenv","docId":"dev-env/package-and-version-management/pyenv"},{"type":"link","label":"Poetry","href":"/course-notes/dev-env/package-and-version-management/poetry","docId":"dev-env/package-and-version-management/poetry"}]}],"href":"/course-notes/dev-env/"},{"type":"category","label":"Refreshers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Python","href":"/course-notes/refreshers/python/","docId":"refreshers/python/index"}],"href":"/course-notes/refreshers/"}]},"docs":{"data-analytics/index":{"id":"data-analytics/index","title":"Data Analytics","description":"Data Analytics Pipeline","sidebar":"notes"},"dev-env/git/index":{"id":"dev-env/git/index","title":"Git and GitHub","description":"1. Distributed Version Control System","sidebar":"notes"},"dev-env/index":{"id":"dev-env/index","title":"About the tools","description":"This guide will help you get started with the tools you need to build a Python environment for Data Analytics.","sidebar":"notes"},"dev-env/package-and-version-management/pip":{"id":"dev-env/package-and-version-management/pip","title":"Pip","description":"PIP is a standard python command for package management systems, this is used to install, upgrade, and uninstall the software packages that are written in python. PIP package manager is similar to another tool that comes with another language. You might be familiar with them as JavaScript uses npm, Dot Net uses NuGet, and Ruby uses the gem package manager. In python, PIP comes up with a python installer in current versions. To verify the PIP availability use this command on the command prompt","sidebar":"notes"},"dev-env/package-and-version-management/poetry":{"id":"dev-env/package-and-version-management/poetry","title":"Poetry","description":"Overview","sidebar":"notes"},"dev-env/package-and-version-management/pyenv":{"id":"dev-env/package-and-version-management/pyenv","title":"Pyenv","description":"Overview","sidebar":"notes"},"index":{"id":"index","title":"Notes","description":"These are some summary notes on the course material. They\'re not comprehensive. You\'re still expected to review the rest of the class material and videos.","sidebar":"notes"},"refreshers/index":{"id":"refreshers/index","title":"Refreshers","description":"","sidebar":"notes"},"refreshers/python/index":{"id":"refreshers/python/index","title":"Python Refresher","description":"Python 3.10.4","sidebar":"notes"}}}')}}]);