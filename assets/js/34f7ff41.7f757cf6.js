"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4337],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:2.1,title:"SQL Refresher",sidebar_label:"SQL"},s=void 0,i={unversionedId:"refreshers/sql/index",id:"refreshers/sql/index",title:"SQL Refresher",description:"SQL, or Structured Query Language, is a language to talk to databases. It allows you to select specific data and to build complex reports. Today, SQL is a universal language of data. It is used in practically all technologies that process data.",source:"@site/content/course-notes/3.refreshers/sql/index.md",sourceDirName:"3.refreshers/sql",slug:"/refreshers/sql/",permalink:"/course-notes/refreshers/sql/",draft:!1,editUrl:"https://github.com/IT4063C/IT4063C.github.io/tree/main/content/course-notes/3.refreshers/sql/index.md",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1658711839,formattedLastUpdatedAt:"Jul 25, 2022",sidebarPosition:2.1,frontMatter:{sidebar_position:2.1,title:"SQL Refresher",sidebar_label:"SQL"},sidebar:"notes",previous:{title:"Python",permalink:"/course-notes/refreshers/python/"},next:{title:"SQL2",permalink:"/course-notes/refreshers/sql/another"}},o={},c=[{value:"SAMPLE DATA",id:"sample-data",level:2},{value:"QUERYING SINGLE TABLE",id:"querying-single-table",level:2},{value:"ALIASES",id:"aliases",level:2},{value:"COLUMNS",id:"columns",level:3},{value:"TABLES",id:"tables",level:3},{value:"FILTERING THE OUTPUT",id:"filtering-the-output",level:2},{value:"COMPARISON OPERATORS",id:"comparison-operators",level:3},{value:"TEXT OPERATORS",id:"text-operators",level:3},{value:"OTHER OPERATORS",id:"other-operators",level:3},{value:"QUERYING MULTIPLE TABLES",id:"querying-multiple-tables",level:2},{value:"INNER JOIN",id:"inner-join",level:3},{value:"LEFT JOIN",id:"left-join",level:3},{value:"RIGHT JOIN",id:"right-join",level:3},{value:"FULL JOIN",id:"full-join",level:3},{value:"CROSS JOIN",id:"cross-join",level:3}],u={toc:c};function p(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SQL"),", or Structured Query Language, is a language to talk to databases. It allows you to select specific data and to build complex reports. Today, SQL is a universal language of data. It is used in practically all technologies that process data."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This cheatsheet is from ",(0,r.kt)("a",{parentName:"p",href:"https://learnsql.com/blog/sql-basics-cheat-sheet/"},"https://learnsql.com/blog/sql-basics-cheat-sheet/"))),(0,r.kt)("h2",{id:"sample-data"},"SAMPLE DATA"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sample data",src:n(30246).Z,width:"2000",height:"936"})),(0,r.kt)("h2",{id:"querying-single-table"},"QUERYING SINGLE TABLE"),(0,r.kt)("p",null,"Fetch all columns from the country table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM country;\n")),(0,r.kt)("p",null,"Fetch id and name columns from the city table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name\nFROM city;\n")),(0,r.kt)("p",null,"Fetch city names sorted by the rating column in the default ASCending order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nORDER BY rating [ASC];\n")),(0,r.kt)("p",null,"Fetch city names sorted by the rating column in the DESCending order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nORDER BY rating DESC;\n")),(0,r.kt)("h2",{id:"aliases"},"ALIASES"),(0,r.kt)("h3",{id:"columns"},"COLUMNS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name AS city_name\nFROM city;\n")),(0,r.kt)("h3",{id:"tables"},"TABLES"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT co.name, ci.name\nFROM city AS ci\nJOIN country AS co\n  ON ci.country_id = co.id;\n")),(0,r.kt)("h2",{id:"filtering-the-output"},"FILTERING THE OUTPUT"),(0,r.kt)("h3",{id:"comparison-operators"},"COMPARISON OPERATORS"),(0,r.kt)("p",null,"Fetch names of cities that have a rating above 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE rating > 3;\n")),(0,r.kt)("p",null,"Fetch names of cities that are neither Berlin nor Madrid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE name != 'Berlin'\n  AND name != 'Madrid';\n")),(0,r.kt)("h3",{id:"text-operators"},"TEXT OPERATORS"),(0,r.kt)("p",null,"Fetch names of cities that start with a 'P' or end with an 's':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE name LIKE 'P%'\n  OR name LIKE '%s';\n")),(0,r.kt)("p",null,"Fetch names of cities that start with any letter followed by 'ublin' (like Dublin in Ireland or Lublin in Poland):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE name LIKE '%ublin';\n")),(0,r.kt)("h3",{id:"other-operators"},"OTHER OPERATORS"),(0,r.kt)("p",null,"Fetch names of cities that have a population between 500K and 5M:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE population BETWEEN 500000 AND 5000000;\n")),(0,r.kt)("p",null,"Fetch names of cities that don't miss a rating value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE rating IS NOT NULL;\n")),(0,r.kt)("p",null,"Fetch names of cities that are in countries with IDs 1, 4, 7, or 8:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM city\nWHERE country_id IN (1, 4, 7, 8);\n")),(0,r.kt)("h2",{id:"querying-multiple-tables"},"QUERYING MULTIPLE TABLES"),(0,r.kt)("h3",{id:"inner-join"},"INNER JOIN"),(0,r.kt)("p",null,"JOIN (or explicitly INNER JOIN) returns rows that have matching values in both tables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\n[INNER] JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using INNER JOIN",src:n(91435).Z,width:"1536",height:"342"})),(0,r.kt)("h3",{id:"left-join"},"LEFT JOIN"),(0,r.kt)("p",null,"LEFT JOIN returns all rows from the left table with corresponding rows from the right table. If there's no matching row, NULLs are returned as values from the second table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nLEFT JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using LEFT JOIN",src:n(33461).Z,width:"1532",height:"358"})),(0,r.kt)("h3",{id:"right-join"},"RIGHT JOIN"),(0,r.kt)("p",null,"RIGHT JOIN returns all rows from the right table with corresponding rows from the left table. If there's no matching row, NULLs are returned as values from the left table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nRIGHT JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using RIGHT JOIN",src:n(81803).Z,width:"2000",height:"440"})),(0,r.kt)("h3",{id:"full-join"},"FULL JOIN"),(0,r.kt)("p",null,"FULL JOIN (or explicitly FULL OUTER JOIN) returns all rows from both tables \u2013 if there's no matching row in the second table, NULLs are returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nFULL [OUTER] JOIN country\n  ON city.country_id = country.id;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using FULL JOIN",src:n(86189).Z,width:"2000",height:"513"})),(0,r.kt)("h3",{id:"cross-join"},"CROSS JOIN"),(0,r.kt)("p",null,"CROSS JOIN returns all possible combinations of rows from both tables. There are two syntaxes available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city\nCROSS JOIN country;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT city.name, country.name\nFROM city, country;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tables joined using CROSS JOIN",src:n(93897).Z,width:"2000",height:"513"})))}p.isMDXComponent=!0},30246:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-sample-data-c2979b57912972a4dfe843cf0a060b01.png"},91435:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/02-inner-join-5b94bdc099b2876747a29e50a341c4f8.png"},33461:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/03-left-join-7b510d100b7bea0df5edc38fb5d143e3.png"},81803:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/04-right-join-b9442e22a02618bf3469af9bbd7a3fd0.png"},86189:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/05-full-join-23fe10d649561370de35a31fbc4fa122.png"},93897:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/06-cross-join-10e6d5af32cf51bd16c605d9dea9e2e4.png"}}]);