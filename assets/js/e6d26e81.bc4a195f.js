"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1480],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),i=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},s=function(e){var n=i(e.components);return a.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=i(t),k=r,m=d["".concat(u,".").concat(k)]||d[k]||c[k]||l;return t?a.createElement(m,p(p({ref:n},s),{},{components:t})):a.createElement(m,p({ref:n},s))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,p=new Array(l);p[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var i=2;i<l;i++)p[i]=t[i];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},55065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>i});var a=t(87462),r=(t(67294),t(3905));const l={sidebar_position:4.1,title:"Python Refresher",sidebar_label:"Python"},p=void 0,o={unversionedId:"refreshers/python/index",id:"refreshers/python/index",title:"Python Refresher",description:"Python 3.10.4",source:"@site/content/course-notes/4.refreshers/python/index.md",sourceDirName:"4.refreshers/python",slug:"/refreshers/python/",permalink:"/course-notes/refreshers/python/",draft:!1,editUrl:"https://github.com/IT4063C/IT4063C.github.io/tree/main/content/course-notes/4.refreshers/python/index.md",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1658433384,formattedLastUpdatedAt:"Jul 21, 2022",sidebarPosition:4.1,frontMatter:{sidebar_position:4.1,title:"Python Refresher",sidebar_label:"Python"},sidebar:"notes",previous:{title:"Refreshers",permalink:"/course-notes/refreshers/"}},u={},i=[{value:"<em>Numbers (Integers, Floats)</em>",id:"numbers-integers-floats",level:3},{value:"Variables",id:"variables",level:3},{value:"Strings",id:"strings",level:3},{value:"Print()",id:"print",level:3},{value:"Lists",id:"lists",level:3},{value:"List slicing",id:"list-slicing",level:3},{value:"List comprehension",id:"list-comprehension",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Booleans",id:"booleans",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"if, elif, else Statements",id:"if-elif-else-statements",level:3},{value:"Functions",id:"functions",level:2},{value:"Retuning a value",id:"retuning-a-value",level:3},{value:"Lambda function",id:"lambda-function",level:3},{value:"Try, Except, and Else Statements",id:"try-except-and-else-statements",level:2},{value:"for Loops",id:"for-loops",level:2}],s=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const d={toc:i};function k(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# checking python version\n python -V\n")),(0,r.kt)(s,{lang:"bash",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Python 3.10.4\n"))),(0,r.kt)("h3",{id:"numbers-integers-floats"},(0,r.kt)("em",{parentName:"h3"},"Numbers (Integers, Floats)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# This is a comment\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# multiplying \n5*2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"10\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# dividing\n5/2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2.5\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# dividing and returning only the whole part\n5//2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# dividing and returning remainder after division\n5%2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# making an exponential calculation\n5**2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"25\n"))),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Can only be one word."),(0,r.kt)("li",{parentName:"ul"},"Can use only letters, numbers, and the underscore (_) character."),(0,r.kt)("li",{parentName:"ul"},"Can\u2019t begin with a number."),(0,r.kt)("li",{parentName:"ul"},"Variables are case-sensitive (data, Data and DATA would be different variable names).")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# defining variables\napple = 3\nbanana = 2\napple + banana\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# calculating sum of 2 vars\napple + apple\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"6\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# assigning value to a var\napple = apple + apple\napple\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"6\n"))),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a simple string\n'This is fun!'\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"'This is fun!'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating a simple string\n"This is fun, isn\'t it!?"\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"This is fun, isn\'t it!?"\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# concatenanting 2 strings together\n"This is fun, " + "isn\'t it!?"\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"This is fun, isn\'t it!?"\n'))),(0,r.kt)("h3",{id:"print"},"Print()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# printing a string\nprint("printed")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"printed\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# printing an integer\nprint(apple)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"6\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# using print with format\nname = "Sam"\ngrade = 81\nprint("{} scored a grade of {} on the test.".format(name, grade))\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Sam scored a grade of 81 on the test.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# using f-string with print statement\nprint(f"{name} scored a grade of {grade} on the test.")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Sam scored a grade of 81 on the test.\n"))),(0,r.kt)("h3",{id:"lists"},"Lists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a list of integers\n[1,2,3,4,5]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 2, 3, 4, 5]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a list of int and string\nL = [1, 'two', 3, 4, 5]\nL\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 'two', 3, 4, 5]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# accessing list items using index notation\nL[0]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# assigning value to an item of the list\nL[1] = 2\nL\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 2, 3, 4, 5]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# concatenating lists together \nL + [6, 7, 8, 9]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"))),(0,r.kt)("h3",{id:"list-slicing"},"List slicing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# slicing a list\nL3 = [1,2,3,4,5]\nL3[0:3]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 2, 3]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# selecting all items - starting for the position 3\nL3[3:]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[4, 5]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# selecting the last element of the list\nL3[-1]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# returning reversed list\nL3[::-1]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[5, 4, 3, 2, 1]\n"))),(0,r.kt)("h3",{id:"list-comprehension"},"List comprehension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a list\nL = [-1,-2,-3,-4,-5]\nL\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[-1, -2, -3, -4, -5]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a new list based on the list 'L'\nL_dbl = [n*2 for n in L]\nL_dbl\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[-2, -4, -6, -8, -10]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a new list based on the list 'L'\nL_abs = [abs(num) for num in L]\nL_abs\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 2, 3, 4, 5]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a new list based on the list 'L_abs'\nfilter_L = [num for num in L_abs if num < 3]\nfilter_L\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[1, 2]\n"))),(0,r.kt)("h3",{id:"tuples"},"Tuples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a tuple\ntup = (1,2,3)\ntup\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(1, 2, 3)\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# selecting elements of the list\ntup[:2]\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(1, 2)\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# unpacking and assigning multiple values at once\nnum1, num2, num3 = (5,11,15)   \nprint(num2)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"11\n"))),(0,r.kt)("h3",{id:"booleans"},"Booleans"),(0,r.kt)("p",null,"Booleans represent one of two values: ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# TRUE boolean\nTrue\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# FALSE boolean\nFalse\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# using int() to turn the boolean into 1 \nint(True)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# using int() to turn the boolean into 0\nint(False)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"0\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# 'True and True' always return'True'\nTrue and True\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# 'True AND False' always returns 'False'\nTrue and False\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# 'True OR False' always returns 'True'\nTrue or False\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 < 2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 > 2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 <= 2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 >= 2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 == 2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 == 1\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n1 != 2\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n(1 < 2) and (2 < 3)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n(1 > 2) or (2 < 3)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# comparing values and returning a boolean\n"string" == "string"\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# comparing values and returning a boolean\n\"string\" == 'spring'\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# comparing values and returning a boolean\n"Bill" in ["Bill", "Sarah", "Karen"]\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# comparing values and returning a boolean\n"Ann" not in ["Bill", "Sarah", "Karen"]\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("h3",{id:"if-elif-else-statements"},"if, elif, else Statements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if")," is a condition statement."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"elif"),' is pythons way of saying "if the previous conditions were not true, then try this condition".'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"else")," statement catches anything which isn't caught by the preceding conditions.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# using the 'if' statement\nif 1:\n    print(\"True\")\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# for any non-zero number it will return True\nif -3.1415:\n    print("negative Pi is True!")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"negative Pi is True!\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating another example of \'if\' statements\nuser_email = "jeff@amazon.com"\npassword = "bezos"\n\nif user_email == "jeff@amazon.com":\n    if password == "bezos":\n        print("Access granted.")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Access granted.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating an 'if' statement for value comparison\nif 5>2: \n    print(\"True\")\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"if <condition>:\n    block of code\nelif <condition)\n    block of code\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating an example of combinations of conditions\nage = 25\n\nif age < 10:\n    print("Just a kid.")\nelif age < 16:\n    print("Can\'t drive yet!")\nelif age > 21:\n    print("You are an adult!")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"You are an adult!\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"if <condition>:\n    block of code\nelse:\n    block of code\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating an example of combinations of conditions\nage = 25\n\nif age < 10:\n    print("Just a kid.")\nelif age < 16:\n    print("Can\'t drive yet!")\nelif age < 21:\n    print("No drinking for you!")\nelse:\n    print("You\'re good to go!")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"You're good to go!\n"))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"A function is a block of code which only runs when it is called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating a simple function of print statements\ndef greeting():\n    print("Hello")\n    print("Hola")\n    print("Ciao")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# calling the function\ngreeting()\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello\nHola\nCiao\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating a function that requires a parameter\ndef root_on(school):\n    if school == "UC":\n        print("Go Bearcats!")\n    elif school == "OSU":\n        print("Go Buckeyes!")\n    else:\n        print("Go team!")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# calling the function\nroot_on("UC")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Go Bearcats!\n"))),(0,r.kt)("h3",{id:"retuning-a-value"},"Retuning a value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# returning a value within a function\ndef root_on2(school):\n    if school == "UC":\n        return "Go Bearcat!"\n    if school == "OSU":\n        return "Go Buckeyes!"\n    return "Go team!"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# calling the fucntion\nmy_team = root_on2("UC")\nprint("You can do it! {}".format(my_team))\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"You can do it! Go Bearcat!\n"))),(0,r.kt)("h3",{id:"lambda-function"},"Lambda function"),(0,r.kt)("p",null,"A lambda function is a small anonymous function."),(0,r.kt)("p",null,"A lambda function can take any number of arguments, but can only have one expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a 'lambda' fuction\naFunction = lambda x: x * x\nprint(aFunction(10))\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"100\n"))),(0,r.kt)("h2",{id:"try-except-and-else-statements"},"Try, Except, and Else Statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating a fucntion\ndef divide(a,b):\n    print("a: {} b: {}".format(a, b))\n    try:\n        result = a / b\n    except (ZeroDivisionError) as err:\n        print("Divide by zero:")\n        print(err)\n    except (TypeError) as err:\n        print("Type error:")\n        print(err)\n    else:\n        print(f"{a} divided by {b} is {result}")     # function strings in python\n    finally:\n        print("This will run no matter what")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# calling the fucntion and passing arguments\ndivide(6,2)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"a: 6 b: 2\n6 divided by 2 is 3.0\nThis will run no matter what\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# calling the fucntion and passing arguments\ndivide(6, 'a')\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"a: 6 b: a\nType error:\nunsupported operand type(s) for /: 'int' and 'str'\nThis will run no matter what\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# calling the fucntion and passing arguments\ndivide(6,0)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"a: 6 b: 0\nDivide by zero:\ndivision by zero\nThis will run no matter what\n"))),(0,r.kt)("h2",{id:"for-loops"},"for Loops"),(0,r.kt)("p",null,"A for loop is used to iterate over a sequence of values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a sequence of numbers\nrange(10)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"range(0, 10)\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# applying the sequence to a list\nlist(range(10))\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a 'for loop'\nfor number in range(10):\n    print(number)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a for loop for a specific range of values - range(start, stop)\nfor num in range(90,101):\n    print(num)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a for loop for a specific range of values - range(start, stop)\nfor item in range(0, 26, 5):\n    print(item)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"0\n5\n10\n15\n20\n25\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a for loop for a range of values that goes in reverse/decending order\nfor value in range(10,0,-1):\n    print(value)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# creating a more elaborated for looop \nmy_list = [1, 11, 4, 44]\n\nfor thing in my_list:\n    greeting()\n    print("\\n")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello\nHola\nCiao\n\n\nHello\nHola\nCiao\n\n\nHello\nHola\nCiao\n\n\nHello\nHola\nCiao\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# creating a for loop to print values from a list\nmy_list = [1, 11, 4, 44]\n\nfor thing in my_list:\n    print(thing)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n11\n4\n44\n"))))}k.isMDXComponent=!0}}]);